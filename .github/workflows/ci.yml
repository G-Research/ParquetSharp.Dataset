name: CI

on:
  push:
  pull_request:

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true
  PUBLISH_RELEASE: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && !github.event.repository.fork }}

jobs:

  check-format:
    if: github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    name: Check format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
      - name: Code formating check
        run: |
          dotnet tool restore
          dotnet jb cleanupcode ParquetSharp.Dataset.sln --profile="Built-in: Reformat Code" --settings="ParquetSharp.Dataset.DotSettings" --verbosity=WARN

          files=($(git diff --name-only))
          if [ ${#files[@]} -gt 0 ]
          then
            for file in $files; do
              echo "::error file=$file::Code format check failed. To fix formatting, run 'dotnet tool restore' then 'dotnet jb cleanupcode ParquetSharp.Dataset.sln --profile=\"Built-in: Reformat Code\" --settings=ParquetSharp.Dataset.DotSettings'";
            done

            echo "Diff after formatting:"
            git diff

            exit 1
          fi

  # Build the nuget package and upload it as an artifact.
  build-nuget:
    if: github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    name: Build NuGet package
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Get version
      id: get-version
      shell: pwsh
      run: |
        $version_prefix=$((Select-Xml -Path ./ParquetSharp.Dataset/ParquetSharp.Dataset.csproj -XPath '/Project/PropertyGroup/VersionPrefix/text()').node.Value)
        if ( "${env:PUBLISH_RELEASE}" -eq "true") {
          $version_suffix=""
          $version="${version_prefix}"
        } else {
          $version_suffix="$(git rev-parse --short HEAD)"
          $version="${version_prefix}-${version_suffix}"
        }
        echo "version=${version}"
        echo "version=${version}" >> $env:GITHUB_OUTPUT
        echo "version_suffix=${version_suffix}" >> $env:GITHUB_OUTPUT
    - name: Build project
      run: dotnet build ParquetSharp.Dataset --configuration=Release --version-suffix "${{ steps.get-version.outputs.version_suffix }}"
    - name: Build NuGet package
      run: dotnet pack ParquetSharp.Dataset --configuration=Release --no-build --output nuget --version-suffix "${{ steps.get-version.outputs.version_suffix }}"
    - name: Upload NuGet artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: nuget

  # Run .NET unit tests with the nuget package on all platforms and all supported .NET runtimes (thus testing the user workflow).
  test-nuget:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        dotnet: [net8.0, net9.0]
        arrow: [18.0.0]
        include:
          - os: ubuntu-latest
            dotnet: net8.0
            arrow: 18.1.0
          - os: ubuntu-latest
            dotnet: net8.0
            arrow: 19.0.1
          - os: ubuntu-latest
            dotnet: net8.0
            arrow: 20.0.0
      fail-fast: false
    name: Test NuGet package (.NET ${{ matrix.dotnet }} on ${{ matrix.os }} with Arrow ${{ matrix.arrow }})
    runs-on: ${{ matrix.os }}
    needs: build-nuget
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Download NuGet artifact
      uses: actions/download-artifact@v4
      with:
        name: nuget-package
        path: nuget
    - name: Setup .NET 8 SDK
      if: matrix.dotnet == 'net8.0'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Setup .NET 9 SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    - name: Add local NuGet feed
      run: |
        dotnet new nugetconfig
        dotnet nuget add source -n local $PWD/nuget
    - name: Change test project references to use local NuGet package
      run: |
        dotnet remove ParquetSharp.Dataset.Test reference ParquetSharp.Dataset/ParquetSharp.Dataset.csproj
        dotnet add ParquetSharp.Dataset.Test package ParquetSharp.Dataset -v ${{ needs.build-nuget.outputs.version }}
    - name: Install Apache Arrow version
      run: |
        dotnet add ParquetSharp.Dataset.Test package Apache.Arrow -v ${{ matrix.arrow }}
    - name: Build & Run .NET unit tests
      run: dotnet test ParquetSharp.Dataset.Test --configuration=Release --framework ${{ matrix.dotnet }}

  # Virtual job that can be configured as a required check before a PR can be merged.
  # As GitHub considers a check as successful if it is skipped, we need to check its status in
  # another workflow (check-required.yml) and create a check there.
  all-required-checks-done:
    name: All required checks done
    needs:
      - check-format
      - test-nuget
    runs-on: ubuntu-latest
    steps:
      - run: echo "All required checks done"

  # Create a GitHub release and publish the NuGet packages to nuget.org when a tag is pushed.
  publish-release:
    # This should match env.PUBLISH_RELEASE (which we can't access in an if condition)
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && !github.event.repository.fork
    name: Publish release
    runs-on: ubuntu-latest
    needs: [build-nuget, all-required-checks-done]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Check version
      id: check-version
      shell: pwsh
      run: |
        $version = "${{ needs.build-nuget.outputs.version }}"
        $tag = "${{ github.ref }}".SubString(10)
        if (-not ($tag -eq $version)) {
          echo "::error ::There is a mismatch between the project version ($version) and the tag ($tag)"
          exit 1
        }
    - name: Download NuGet artifact
      uses: actions/download-artifact@v4
      with:
        name: nuget-package
        path: nuget
    # if version contains "-" treat it as pre-release
    # example: 1.0.0-beta1
    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        name: ParquetSharp.Dataset ${{ needs.build-nuget.outputs.version }}
        draft: true
        prerelease: ${{ contains(needs.build-nuget.outputs.version, '-') }}
        files: |
          nuget/ParquetSharp.Dataset.${{ needs.build-nuget.outputs.version }}.nupkg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Publish to NuGet
      run: dotnet nuget push nuget/ParquetSharp.Dataset.${{ needs.build-nuget.outputs.version }}.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
